#
#
#
#   一、工具环境说明：
#   fastlane 2.167.0
#   fastlane-plugin-pgyer，0.2.2
#
#   二、Xcode配置说明：
#   多Target 环境变量配置：各个Target对应一个 PreprocessorMacros (Objc)eg: kEnvironmentDebug,kEnvironmentRelease,或者 Other Swift Flags 新增一个 -D kEnvironment_xxx (swift),eg:kEnvironment_debug,kEnvironment_release
#   证书&描述文件配置：配置对应的Provisioning Profiles 且下载到本地，双击导入，一般Xcode会导入到对应目录.
#             注意1：一旦项工程的Capabilities 改变了，或者entitlments 文件，请注意排查ProvisioningProfiles 是否有效；否则可能打包错误
#     
#
#   三、当前脚本需要配置
#   1.第三方APIKEY，TOKEN 配置 .etc
#
#
#


# 默认平台配置为iOS
default_platform(:ios)

# 网络请求依赖
require 'net/http'
require 'uri'
require 'json'

# iOS 平台 操作
platform :ios do

# 配置开始======================================================================================================

  # 蒲公英测试APIKEY 参数配置
  __PGY_API_KEY = "【配置】"
  # 蒲公英测试USERKEY
  __PGY_USER_KEY = "【配置】"

  # 钉钉 webhook 接口token参数配置
  # 钉钉配置参考https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/9e91d73c
  # 钉钉WebHook 通知机器人 
  __DING_TALK_TOKEN = "https://oapi.dingtalk.com/robot/send?access_token=【配置】"
  # 钉钉要At 的手机号码，支持数组，目前订单的At 功能无法按照列表中的顺序At,bug;
  __DING_TALK_AT_MOBILES = ["【配置】","【配置】"]
  # 钉钉At 消息头1
  __DING_TALK_AT_TEXT = "更新前尽量删除旧包；【配置】"
  # 钉钉通知各个Target 内容对应描述
  # eg:
  #__ARCHIVE_DING_TALK_MSG_CONFIG = {
  #  "Scheme-local" => "内部分发，本地开发机",
  #  "Scheme-test" => "内部分发，测试版",
  #  "Scheme-prd" => "AppStore，提审版"
  #}

  # Xcode 参数配置
  # Xcode 签名证书名称 xcodebuild --help search for keyword "signingCertificate"
  __XCODE_SIGNING_CERTIFICATE_NAME = "Apple Distribution: Chengdu *** Information Technology Co., Ltd."
  # Xcode 编译SDK xcodebuild --help search for keyword "-sdk"
  __XCODE_SDK = "【配置】"
  # 开发者账号TeamID
  __XCODE_SIGNING_TEAM_ID = "【配置】"
  # XCode 项目文件名
  __XCODE_PROJECT_FILE_NAME = "【配置】.xcodeproj"
  # XCode 项目工作区文件名
  __XCODE_WORKSPACE_FILE_NAME = "【配置】.xcworkspace"
  # Xcode 打包基础输出路径,相对于.workspace 文件
  __ARCHIVE_BASE_DIR  = "【配置】"
  # 打包 target List 列表
  __ARCHIVE_TARGET_LIST = ["Scheme_local","Scheme_test","Scheme_release"]
  # XCode provisioningProfiles 打包描述文件
  __XCODE_ADHOC_PROVISIONINGPROFILES_CONFIG = { 
            "com.***.**" => "***_adhoc_20200616",
            "com.***.**.extension" => "***_ext_adhoc_20200616"
            }
  __XCODE_RELEASE_PROVISIONINGPROFILES_CONFIG = {
            "com.***.**" => "***_appstore_20200616",
            "com.***.**.extension" => "***_ext_appstore_20200616"
            }
  # 配置结束======================================================================================================

  desc 'adhoc 打包到蒲公英，并发送钉钉通知，用于测试，验收等'
  lane :adhoc_pgy do

      # 1.用户交互
      __INPUT_SCHEME = UI.select("请选择打包Target:", __ARCHIVE_TARGET_LIST)
      __INPUT_PGY_RELEASE_NOTE = __ARCHIVE_DING_TALK_MSG_CONFIG["#{__INPUT_SCHEME}"]

      # 增加内部版本号
      increment_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)
      #获取最新版本号，生成输出文件的主文件名
      __VERSION_NUMBER = get_version_number(
        xcodeproj: __XCODE_PROJECT_FILE_NAME,
        target: __INPUT_SCHEME
      )
      __BUILD_NUMBER = get_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)

      # 2.打包变量
      # 打包输出路径
      __ARCHIVE_DIR = __ARCHIVE_BASE_DIR + __INPUT_SCHEME + "/"
      # 打包输出主文件名
      __OUTPUT_FILE_MAIN_NAME = __INPUT_SCHEME + "_v" +__VERSION_NUMBER + "_b" + __BUILD_NUMBER
      # 打包文件IPA名称
      __IAP_FILE_NAME = __OUTPUT_FILE_MAIN_NAME + ".ipa"
      # 打包文件.xcarchive 输出路径
      __ARCHIVE_FILE_PATH = __ARCHIVE_DIR + __OUTPUT_FILE_MAIN_NAME + ".xcarchive"

      # 3.打包开始
      gym(
        workspace: __XCODE_WORKSPACE_FILE_NAME,
        configuration: "Release",
        scheme: __INPUT_SCHEME,
        silent: false,
        clean: true,
        skip_profile_detection: true,
        output_directory: __ARCHIVE_DIR, # Destination directory. Defaults to current directory.
        output_name: __IAP_FILE_NAME,       # specify the name of the .ipa file to generate (including file extension)
        sdk: __XCODE_SDK,       # use SDK as the name or path of the base SDK when building the project.
        include_symbols: false,
        include_bitcode: false,
        archive_path: __ARCHIVE_FILE_PATH,
        export_options: {
          destination: "export",
          compileBitcode: false,
          uploadBitcode: false,
          method: "ad-hoc",
          signingStyle: "manual",
          teamID: __XCODE_SIGNING_TEAM_ID,
          signingCertificate: __XCODE_SIGNING_CERTIFICATE_NAME,
          provisioningProfiles: __XCODE_ADHOC_PROVISIONINGPROFILES_CONFIG}
      )

      # 4.上传蒲公英
      pgyer(
          api_key: __PGY_API_KEY, 
          user_key: __PGY_USER_KEY,
          update_description: __INPUT_PGY_RELEASE_NOTE
      )

      # 5.通知打包测试信息
      # 钉钉机器人1
      app_patch = __ARCHIVE_DIR + __IAP_FILE_NAME
      app_version = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleShortVersionString")
      app_build_version = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleVersion")
      app_name = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleDisplayName")

      # pgyer_v2 插件生成的文件内容，得到图标，下载地址
      pgyer_upload_note_file_name = "./pgyer_upload_note_file.txt"
      pgyer_note_content = IO.read(pgyer_upload_note_file_name)
      notes_info_list = pgyer_note_content.split(" ")
      
      app_down_load_url = notes_info_list[0]
      app_icon_url = notes_info_list[2]

      app_url = app_down_load_url
      app_icon = app_icon_url
      dingTalk_url = __DING_TALK_TOKEN
      dingTalk_mardown_title_des = __ARCHIVE_DING_TALK_MSG_CONFIG["#{__INPUT_SCHEME}"]

      markdown = {
        msgtype: "link", 
        link: {
            text: "已经更新啦，快来试试吧!", 
            title: "iOS #{app_name} #{app_version} (#{app_build_version}) #{dingTalk_mardown_title_des}", 
            picUrl: "#{app_icon}", 
            messageUrl: "#{app_url}"
        }
      }
      uri = URI.parse(dingTalk_url)
      https = Net::HTTP.new(uri.host, uri.port)
      https.use_ssl = true

      request = Net::HTTP::Post.new(uri.request_uri)
      request.add_field('Content-Type', 'application/json')
      request.body = markdown.to_json

      response = https.request(request)
      puts "通知1 发送完成 #{response.code} #{response.message}: #{response.body}"

      #钉钉机器人2
      dingTalk_at_msg = {
        msgtype: "text", 
        text: {
            content:__DING_TALK_AT_TEXT
        },
        at:{
          atMobiles: __DING_TALK_AT_MOBILES,
          isAtAll: false
        }
      }
      request.body = dingTalk_at_msg.to_json
      response2 = https.request(request)
      puts "通知2 发送完成 #{response2.code} #{response2.message}: #{response2.body}"
  end

  desc 'adhoc 打包到蒲公英，不发送钉钉通知，用于测试，验收'
  lane :adhoc_pgy_no_ding do

      # 1.用户交互
      __INPUT_SCHEME = UI.select("请选择打包Target:", __ARCHIVE_TARGET_LIST)
      #__INPUT_PGY_RELEASE_NOTE = UI.input("请输入更新日志:")
      __INPUT_PGY_RELEASE_NOTE = __ARCHIVE_DING_TALK_MSG_CONFIG["#{__INPUT_SCHEME}"]

      # 增加内部版本号
      increment_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)
      #获取最新版本号，生成输出文件的主文件名
      __VERSION_NUMBER = get_version_number(
        xcodeproj: __XCODE_PROJECT_FILE_NAME,
        target: __INPUT_SCHEME
      )
      __BUILD_NUMBER = get_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)

      # 2.打包环境变量
      # 打包输出路径
      __ARCHIVE_DIR = __ARCHIVE_BASE_DIR + __INPUT_SCHEME + "/"
      # 文件名时间戳
      __OUTPUT_FILE_MAIN_NAME = __INPUT_SCHEME + "_v" +__VERSION_NUMBER + "_b" + __BUILD_NUMBER
      # 打包文件IPA名称
      __IAP_FILE_NAME = __OUTPUT_FILE_MAIN_NAME + ".ipa"
      # 打包文件.xcarchive 输出路径
      __ARCHIVE_FILE_PATH = __ARCHIVE_DIR + __OUTPUT_FILE_MAIN_NAME + ".xcarchive"

      # 3.打包开始
      gym(
        workspace: __XCODE_WORKSPACE_FILE_NAME,
        configuration: "Release",
        scheme: __INPUT_SCHEME,
        silent: false,
        clean: true,
        skip_profile_detection: true,
        output_directory: __ARCHIVE_DIR, # Destination directory. Defaults to current directory.
        output_name: __IAP_FILE_NAME,       # specify the name of the .ipa file to generate (including file extension)
        sdk: __XCODE_SDK,       # use SDK as the name or path of the base SDK when building the project.
        include_symbols: false,
        include_bitcode: false,
        archive_path: __ARCHIVE_FILE_PATH,
        export_options: {
          destination: "export",
          compileBitcode: false,
          uploadBitcode: false,
          method: "ad-hoc",
          signingStyle: "manual",
          teamID: __XCODE_SIGNING_TEAM_ID,
          signingCertificate: __XCODE_SIGNING_CERTIFICATE_NAME,
          provisioningProfiles: __XCODE_ADHOC_PROVISIONINGPROFILES_CONFIG}
      )

      # 4.上传蒲公英
      pgyer(
          api_key: __PGY_API_KEY, 
          user_key: __PGY_USER_KEY,
          update_description: __INPUT_PGY_RELEASE_NOTE
      )
  end

  desc '打AppStore 提交审核包，用于提交AppStore'
  lane :release_pack do

      # 1.用户交互
      __INPUT_SCHEME = "Scheme_release"

      # 增加内部版本号
      increment_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)
      #获取最新版本号，生成输出文件的主文件名
      __VERSION_NUMBER = get_version_number(
        xcodeproj: __XCODE_PROJECT_FILE_NAME,
        target: __INPUT_SCHEME
      )
      __BUILD_NUMBER = get_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)

      # 2.打包环境变量
      # 打包输出路径
      __ARCHIVE_DIR = __ARCHIVE_BASE_DIR + __INPUT_SCHEME + "/"
      # 文件名时间戳
      __OUTPUT_FILE_MAIN_NAME = __INPUT_SCHEME + "_v" +__VERSION_NUMBER + "_b" + __BUILD_NUMBER
      # 打包文件IPA名称
      __IAP_FILE_NAME = __OUTPUT_FILE_MAIN_NAME + ".ipa"
      # 打包文件.xcarchive 输出路径
      __ARCHIVE_FILE_PATH = __ARCHIVE_DIR + __OUTPUT_FILE_MAIN_NAME + ".xcarchive"

      # 3.打包开始
      gym(
        workspace: __XCODE_WORKSPACE_FILE_NAME,
        configuration: "Release",
        scheme: __INPUT_SCHEME,
        silent: false,
        clean: true,
        skip_profile_detection: true,
        output_directory: __ARCHIVE_DIR, # Destination directory. Defaults to current directory.
        output_name: __IAP_FILE_NAME,       # specify the name of the .ipa file to generate (including file extension)
        sdk: __XCODE_SDK,       # use SDK as the name or path of the base SDK when building the project.
        include_symbols: false,
        include_bitcode: false,
        archive_path: __ARCHIVE_FILE_PATH,
        export_options: {
          destination: "export",
          compileBitcode: false,
          uploadBitcode: false,
          method: "app-store",
          signingStyle: "manual",
          teamID: __XCODE_SIGNING_TEAM_ID,
          signingCertificate: __XCODE_SIGNING_CERTIFICATE_NAME,
          provisioningProfiles: __XCODE_RELEASE_PROVISIONINGPROFILES_CONFIG}
      )
      
      # 4.通过Finder打开当前打好包的目录
      #首先回到项目文件所在目录
      Dir.chdir("./..") do
        # 打开打包输出路径
        sh("open #{__ARCHIVE_DIR}")
      end
  end
  
end
