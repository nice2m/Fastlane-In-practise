#
#   功能描述：基于fastlane，配置Xcode 多target，提供选择target，自动打包上传到蒲公英，且钉钉通知@对应的人员；
#           也可打包出上传AppStore 的包，可直接使用AppLoader 或 Transporter 上传.iap 文件
#

#
#
#
#   一、工具环境说明：
#   fastlane 2.145.0 
#   fastlane-plugin-pgyer，0.2.2
#
#   二、Xcode配置说明：
#   多Target 环境变量配置：各个Target对应一个 PreprocessorMacros (Objc),或者 Other Swift Flags 新增一个 -D kEnvironment_xxx (swift)
#   证书&描述文件配置：配置对应的Provisioning Profiles 且下载到本地，双击导入到Xcode
#   Xcode 配置：
#   Signing & Capabilities：去掉自动管理，注意 "Sign & Capabilities 下的 All,Debug,Release 选项栏 都要去掉自动管理证书勾选"
#
#   三、当前脚本配置
#   1.第三方APIKEY，TOKEN 配置 .etc
#   2.搜索【配置】 对应配置
#
#

# 默认平台配置为iOS
default_platform(:ios)

# 网络请求依赖
require 'net/http'
require 'uri'
require 'json'

# iOS 平台 操作
platform :ios do

# 配置开始======================================================================================================
# 蒲公英测试APIKEY
__PGY_API_KEY = "【配置】"
# 蒲公英测试USERKEY
__PGY_USER_KEY = "【配置】"
# 蒲公英下载页面地址，在钉钉的通知消息中跳转使用
__PGY_DOWN_LOAD_PAGE_URL = "【配置】"
# 蒲公英APP 图标地址，在钉钉的通知消息中展示使用
__PGY_APP_ICON_URL = "【配置】"

# 钉钉配置参考https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/9e91d73c
# 钉钉WebHook 通知机器人  kk2.0  xdc
# 钉钉 webhook 接口token
__DING_TALK_TOKEN = "https://oapi.dingtalk.com/robot/send?access_token=【配置】"
__DING_TALK_AT_MOBILES = ["【配置】","【配置】"]
__DING_TALK_AT_TEXT = "更新前请删除旧包"
# 钉钉通知各个Target 内容对应描述
# 对应 __ARCHIVE_TARGET_LIST内的数据
__ARCHIVE_DING_TALK_MSG_CONFIG = {
"KYD_local" => "内测版 本地开发机",
"KYD_dev" => "内测版 开发服务器",
"KYD_test" => "内测版 测试60服务器",
"KYD_pre" => "内测版 预发布39服务器",
"KYD_release" => "内测版 正式服"
}

# Xcode 配置
# XCode 签名证书名称  xcodebuild --help search for keyword "installerSigningCertificate" mac app only
# eg: Apple Distribution: Chengdu xxx Co., Ltd.
# __XCODE_SIGNING_CERTIFICATE_INSTALLER_NAME = "【配置】"
# Xcode 签名证书名称 xcodebuild --help search for keyword "signingCertificate"
# eg: Apple Distribution: Chengdu xxx Co., Ltd.
__XCODE_SIGNING_CERTIFICATE_NAME = "【配置】"
# Xcode 编译SDK xcodebuild --help search for keyword "-sdk"
__XCODE_SDK = "iOS 13.1"
# 开发者账号TeamID
# eg: "2D3U254JQ6"
__XCODE_SIGNING_TEAM_ID = "【配置】"
# XCode 项目文件名
# eg: xxx.xcodeproj
__XCODE_PROJECT_FILE_NAME = "【配置】"
# XCode 项目工作区文件名
#eg: xxx.xcworkspace
__XCODE_WORKSPACE_FILE_NAME = "【配置】"
# Xcode 打包基础输出路径,相对于.xcworkspace 文件路径
#eg: ./../archives/KYD/
__ARCHIVE_BASE_DIR  = "【配置】"
# 打包 target List 列表，选择，便于多环境配置
#eg: ["KYD_local","KYD_dev","KYD_test","KYD_pre","KYD_release"]
__ARCHIVE_TARGET_LIST = 【配置】
# XCode provisioningProfiles 打包描述文件
#eg:  
# {
#  "com.tckk.kuaiyidian" => "kyd_appstore_20200424"
# }
#
__XCODE_ADHOC_PROVISIONINGPROFILES_CONFIG = 【配置】
# 打正式包，AppStore 提审包 ，release_pack lane 的打包描述文件
#eg:  
# {
#  "com.tckk.kuaiyidian" => "kyd_appstore_20200424"
# }
__XCODE_RELEASE_PROVISIONINGPROFILES_CONFIG = 【配置】
# 配置结束======================================================================================================

  desc 'adhoc 打包到蒲公英，并发送钉钉通知'
  lane :adhoc_pgyer do

      # 1.用户交互
      __INPUT_SCHEME = UI.select("请选择打包Target:", __ARCHIVE_TARGET_LIST)
      __INPUT_PGY_RELEASE_NOTE = UI.input("请输入更新日志:")

      # 增加内部版本号
      increment_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)
      #获取最新版本号，生成输出文件的主文件名
      __VERSION_NUMBER = get_version_number(
        xcodeproj: __XCODE_PROJECT_FILE_NAME,
        target: __INPUT_SCHEME
      )
      __BUILD_NUMBER = get_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)

      # 2.打包变量
      # 打包输出路径
      __ARCHIVE_DIR = __ARCHIVE_BASE_DIR + __INPUT_SCHEME + "/"
      # 打包输出主文件名
      __OUTPUT_FILE_MAIN_NAME = __INPUT_SCHEME + "_v" +__VERSION_NUMBER + "_b" + __BUILD_NUMBER
      # 打包文件IPA名称
      __IAP_FILE_NAME = __OUTPUT_FILE_MAIN_NAME + ".ipa"
      # 打包文件.xcarchive 输出路径
      __ARCHIVE_FILE_PATH = __ARCHIVE_DIR + __OUTPUT_FILE_MAIN_NAME + ".xcarchive"

      # 3.打包开始
      gym(
        workspace: __XCODE_WORKSPACE_FILE_NAME,
        configuration: "Release",
        scheme: __INPUT_SCHEME,
        silent: false,
        clean: true,
        output_directory: __ARCHIVE_DIR, # Destination directory. Defaults to current directory.
        output_name: __IAP_FILE_NAME,    # specify the name of the .ipa file to generate (including file extension)
        sdk: __XCODE_SDK,       
        include_symbols: false,
        include_bitcode: false,
        archive_path: __ARCHIVE_FILE_PATH,
        export_options: {
          destination: "export",
          compileBitcode: false,
          uploadBitcode: false,
          method: "ad-hoc",
          signingStyle: "manual",
          teamID: __XCODE_SIGNING_TEAM_ID,
          signingCertificate: __XCODE_SIGNING_CERTIFICATE_NAME,
          provisioningProfiles: __XCODE_ADHOC_PROVISIONINGPROFILES_CONFIG}
      )

      # 4.上传蒲公英
      pgyer(
          api_key: __PGY_API_KEY, 
          user_key: __PGY_USER_KEY,
          update_description: __INPUT_PGY_RELEASE_NOTE
      )

      # 5.通知打包测试信息
      # 钉钉机器人1
      app_patch = __ARCHIVE_DIR + __IAP_FILE_NAME
      app_version = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleShortVersionString")
      app_build_version = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleVersion")
      app_name = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleDisplayName")
      app_url = __PGY_DOWN_LOAD_PAGE_URL
      app_icon = __PGY_APP_ICON_URL
      dingTalk_url = __DING_TALK_TOKEN
      dingTalk_mardown_title_des = __ARCHIVE_DING_TALK_MSG_CONFIG["#{__INPUT_SCHEME}"]

      markdown = 
      {
        msgtype: "link", 
        link: {
            text: "已经更新啦，快来试试吧!", 
            title: "iOS #{app_name} #{app_version} (#{app_build_version}) #{dingTalk_mardown_title_des}", 
            picUrl: "#{app_icon}", 
            messageUrl: "#{app_url}"
        }
      }
      uri = URI.parse(dingTalk_url)
      https = Net::HTTP.new(uri.host, uri.port)
      https.use_ssl = true

      request = Net::HTTP::Post.new(uri.request_uri)
      request.add_field('Content-Type', 'application/json')
      request.body = markdown.to_json

      response = https.request(request)
      puts "------------------------------"
      puts "Response #{response.code} #{response.message}: #{response.body}"
      #钉钉机器人2
      dingTalk_at_msg = 
      {
        msgtype: "text", 
        text: {
            content:__DING_TALK_AT_TEXT
        },
        at:{
          atMobiles: __DING_TALK_AT_MOBILES,
          isAtAll: false
        }
      }
      request.body = dingTalk_at_msg.to_json
      response2 = https.request(request)
      puts "Response #{response2.code} #{response2.message}: #{response2.body}"
  end

  desc '打AppStore 提交审核包'
  lane :release_pack do

      # 1.用户交互
      __INPUT_SCHEME = "KYD_release"

        # 增加内部版本号
      increment_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)
      #获取最新版本号，生成输出文件的主文件名
      __VERSION_NUMBER = get_version_number(
        xcodeproj: __XCODE_PROJECT_FILE_NAME,
        target: __INPUT_SCHEME
      )
      __BUILD_NUMBER = get_build_number(xcodeproj: __XCODE_PROJECT_FILE_NAME)

      # 2.打包变量
      # 打包输出路径
      __ARCHIVE_DIR = __ARCHIVE_BASE_DIR + __INPUT_SCHEME + "/"
      # 打包输出主文件名
      __OUTPUT_FILE_MAIN_NAME = __INPUT_SCHEME + "_v" +__VERSION_NUMBER + "_b" + __BUILD_NUMBER
      # 打包文件IPA名称
      __IAP_FILE_NAME = __OUTPUT_FILE_MAIN_NAME + ".ipa"
      # 打包文件.xcarchive 输出路径
      __ARCHIVE_FILE_PATH = __ARCHIVE_DIR + __OUTPUT_FILE_MAIN_NAME + ".xcarchive"

      # 3.打包开始
      gym(
        workspace: __XCODE_WORKSPACE_FILE_NAME,
        configuration: "Release",
        scheme: __INPUT_SCHEME,
        silent: false,
        clean: true,
        output_directory: __ARCHIVE_DIR, # Destination directory. Defaults to current directory.
        output_name: __IAP_FILE_NAME,       # specify the name of the .ipa file to generate (including file extension)
        sdk: __XCODE_SDK,       # use SDK as the name or path of the base SDK when building the project.
        include_symbols: false,
        include_bitcode: false,
        archive_path: __ARCHIVE_FILE_PATH,
        export_options: {
          destination: "export",
          compileBitcode: false,
          uploadBitcode: false,
          method: "app-store",
          signingStyle: "manual",
          teamID: __XCODE_SIGNING_TEAM_ID,
          signingCertificate: __XCODE_SIGNING_CERTIFICATE_NAME,
          provisioningProfiles: __XCODE_RELEASE_PROVISIONINGPROFILES_CONFIG}
      )

      # 4.通过Finder打开当前打好包的目录
      #首先回到项目文件所在目录
      Dir.chdir("./..") do
        # 打开打包输出路径
        sh("open #{__ARCHIVE_DIR}")
      end
  end

end
